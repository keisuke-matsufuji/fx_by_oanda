service: deploy
provider:
  name: aws
  runtime: python3.8
  region: us-east-2
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - cloudformation: CreateStack
        # - cloudformation: DescribeStacks
        # - cloudformation: CreateChangeSet
        # - cloudformation: ListStacks
        # - cloudformation: UpdateStack
        # - cloudformation: DescribeChangeSet
        # - cloudformation: ExecuteChangeSet
        # - iam: GetRole
        # - lambda: UpdateFunctionCode
        # - lambda: UpdateFunctionConfig
        # - lambda: GetFunctionConfiguration
        # - lambda: AddPermission
        # - s3: GetObject
      # Resource: "arn:aws:iam::*:role/*"
  role: ${env:AWS_LAMBDA_ROLE_ARN}
  stage: prod

# plugins:
#   - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
    slim: true

package:
  individually: true
  exclude:
    # - Dockerfile
    - docker-compose.yml

# AWS Lambda Layers
layers:
  boto:
    path: layers
    name: ${self:service}-layer_test
    compatibleRuntimes:
      - python3.8
    allowedAccounts:
      - '*'

# AWS Lambda Functions
functions:
  deploy_test:
    runtime: python3.8
    name: ${self:service}-${self:provider.stage}--deploy_test
    module: functions/deploy_test
    package:
      individually: true
    path: functions/deploy_test/
    include:
      - functions/deploy_test/*
    exclude:
      - docker
    handler: functions/deploy_test/main.lambda_handler
    layers:
      - {Ref: BotoLambdaLayer}
    environment:
      DYNAMODB_ENDPOINT: 'https://dynamodb.us-east-2.amazonaws.com'
      ENV_PARAM_TEST: env_test